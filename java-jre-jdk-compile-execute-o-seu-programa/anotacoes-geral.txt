1 - O que é Java

O grande benefício de uma Máquina Virtual Java (JVM), é executar o código independente do sistema operacional. Ou seja, no mundo Java você terá sempre o mesmo "executável"
ou Bytecode que será executado pela Maquina Virtual Java, totalmente independente do sistema operacional. Assim não é preciso rescrever ou adaptar o código para rodar em um 
outro sistema operacional. Temos um único executável para todos os sistemas!

A linguagem Java nasceu com algumas características que são mantidas até hoje.
    Parecido com C++, Java nasceu sendo parecido com C++ que era a linguagem mais popular na época.
    Muitas bibliotecas, desde o início o Java possui muitas bibliotecas que ainda muito aumentaram devido as milhares de contribuições da comunidade open source.
    Multiplataforma, Java é multiplataforma, roda em qualquer sistema operacional desde que exista a máquina virtual Java.

Seja web ou puramente server-side, aplicativo Android ou um antigo applet, Java atende todas essas áreas! No entanto, os sistemas web e Android são os que mais fizeram sucesso
no mundo Java e mais empregam desenvolvedores.

Qual é a diferença entre o executável do Windows (exe) e o executável do mundo Java (Bytecode)?
Os executáveis do mundo Java são portáveis, os do mundo Windows não. Lembrando portável significa que podem ser executados em vários sistemas operacionais diferentes
(Windows, Linux, Mac, etc).
Os executáveis do mundo Windows podem ser executados diretamente no sistema operacional, os do mundo Java precisam da máquina virtual. Os executáveis Java precisam da máquina
virtual Java.

O Bytecode é o código fonte" não é verdadeira. O código fonte é para o desenvolvedor entender, o Bytecode foi criado e otimizado para a máquina virtual.
Existe um conjunto de comandos que a máquina virtual Java entende. Esses comandos também são chamados de opcodes (operation code), e cada opcode possui
o tamanho de exatamente 1 Byte! E aí temos um opcode de 1 Byte ou, mais simples, Bytecode.

Principais características da linguagem Java
    Orientado a objetos
    Parecido com C++
    Muitas bibliotecas e grande comunidade

Descrevemos
    A diferença entre o código fonte e o Bytecode
    O que precisamos para executar o Bytecode é preciso ter a máquina virtual java  
    Que o Bytecode é independente do sistema operacional

Principais componentes da plataforma Java
    Java Virtual Machine (JVM)
    linguagem Java
    Bibliotecas Java (API)

2 - Instalação e Primeiro Programa

Referente a JDK e JRE

O JRE é o ambiente para executar uma aplicação Java. Caso queira executar uma aplicação Java apenas, basta o JRE (Java Runtime Environment). o JRE (Java Runtime Environment)
é apenas para executar o Bytecode.

O JDK é o ambiente para executar uma aplicação Java e possui várias ferramentas de desenvolvimento. O JDK são as ferramentas de desenvolvimento (como o compilador)
mas também tem JRE embutido! o JDK também possui o compilador, mas é muito mais do que isso! Dentro dele vem várias outras ferramentas (para, por exemplo, gerar a documentação)
e também tem o JRE embutido.

O mundo Java é cheio de siglas com 3 ou 4 letras começando com J. Duas famosas: o JRE e JDK. O primeiro é o ambiente de execução, o segundo são as
ferramentas de desenvolvimento junto com o ambiente de execução. Simplificando podemos dizer: JDK = JRE + ferramentas de desenvolvimento

Existe uma terceira sigla, JVM (Java Virtual Machine). A responsabilidade da Java Virtual Machine é executar o Bytecode! Então qual é diferença entre JVM e JRE?
Ambos executam o Bytecode, certo? A resposta é simples: O JRE (o nosso ambiente de execução) contém a JVM, mas também possui um monte de bibliotecas embutidas.
Ou seja, para rodar uma aplicação Java não basta ter apenas a JVM, também é preciso ter as bibliotecas. Assim podemos simplificar e dizer: JRE = JVM + bibliotecas

É importante entender que você não pode baixar a JVM apenas. Você sempre baixa o JRE que tem a JVM e as bibliotecas em conjunto.

Primeira aplicação

Para começar com desenvolvimento Java e precisamos da entrada de uma aplicação e ela é sempre a função (ou método) main. 
Essa função/método, é escrita da seguinte forma:

public class Programa {

    public static void main(String[] args) {


    }

}

Ou seja, a entrada de uma aplicação Java, por onde ela vai começar a executar é sempre uma função/método public static void main(String[] args).

Sobre a compilação e a execução

Durante a compilação acontece uma verificação sintática do código fonte.
Na compilação e execução podem aparecer erros.
A JVM lê e executa o Bytecode.
O compilador gera o Bytecode caso não tenha nenhum erro sintático no código fonte.

Compilar e executar

Podemos compilar e executar um código java, sem uma IDE, ou seja, sem uma interface grafica. Para isso podemos fazer via prompt de comando o que
a IDE faria automaticamente, Por exemplo, temos a seguinte entrada:

class Programa {

    public static void main(String[] args) {
        System.out.println("Funcionou!!");
    }
}

para compilar e rodar esse código Java, basta rodarmos as seguintes linhas no prompt

passamos a extensão do arquivo (.java) para o comando javac: Para compilar
javac Programa.java

E para chamar a JVM usamos apenas o nome da classe (sem extensão):
java Programa

Com isso será mostrado na tela a mensagem "Olá Mundo".

Onde System.out.println("ola mundo"), irá imprimir algo na tela, mas apenas ele não será suficiente para que o programa compile. 
Para que nosso código compile, primeiramente envolva-o com uma classe, ficando dessa forma:

public class Programa{

    System.out.println("ola mundo");
}

Nosso programa ainda não compila, para funcionar, precisamos colocar o método main:

public class Programa{

    public static void main(String[] args){

        System.out.println("ola mundo");
    }
}

Após isso salvamos o arquivo como Programa.java em algum diretório. O nome deve ser exatamente igual ao nome da classe criada,
inclusive as letras maiúsculas e minúsculas! Lembre-se que o Java é case-sensitive.

Agora, compile o código utilizando o compilador de Java da Oracle, chamado de javac. Ele nos dará o bytecode:

javac Programa.java

Após compilado, podemos ver que o bytecode foi gerado com o mesmo nome, mas com .class no final.

Execute o programa já compilado escrevendo:

java Programa

Quando escrevemos apenas java, estamos invocando a máquina virtual para interpretar nosso programa.

Após feito isso, teremos como saída a frase ola mundo.

Vimos:
Qual é a diferença entre JRE e JDK
Como compilar um código fonte Java na linha de comando (javac)
Como executar o Bytecode na linha de comando (java)
Um programa Java deve estar escrito dentro de uma classe (class)
Toda instrução Java deve ser finalizada com ;
Para abrir e fechar um bloco usaremos as chaves {}
Um programa Java possui uma entrada que é uma função (método) main
Para imprimir algo no console usamos a instrução System.out.println()

3 - Começando com o Eclipse

Podemos programar em Java utilizando editores de textos e IDEs
Um IDE é um ambiente integrado de desenvolvimento que centraliza em um único lugar o compilador da linguagem utilizada,
editor de texto, documentação e tudo que gira em torno da criação de aplicações.

Um IDE é um ambiente integrado de desenvolvimento que centraliza em um único lugar, e NetBeans e Intellij são outros exemplos famosos
de IDEs Java.

Sobre workspace

Cada projeto do Eclipse fica dentro de um workspace. Um workspace é a pasta padrão que será utilizado para armazenar todos os projetos
criados com a IDE Eclipse.

Rodando nosso programa no Eclipse

1) Ao inicializarmos o Eclipse, ele nos pedirá para selecionarmos um "workspace", que é onde ficarão armazenados seus projetos. Caso você queira personalizar isso, clique em Browse... e selecione sua pasta. Nesse curso usaremos a própria pasta workspace.

2) Feche a página de Welcome e vamos iniciar o Eclipse da maneira que encontramos ele normalmente.

3) Clique em File e coloque seu cursor sobre a linha new e veja que o Eclipse nos dará algumas opções. Escolha Java project.

4) Nessa janela nova, nomearemos nosso projeto, escolhemos o nome sintaxe-basica, lembre-se de verificar a versão do Java utilizada.

5) Repare que temos um novo projeto na View Package Explorer, guardaremos nosso projeto dentro desta pasta src que foi criada.

6) No diretório src, clique com o botão direito do mouse, coloque o cursor em new e escolha class

7) Nessa nova janela, criaremos a classe com o nome Programa, nesse momento não se preocupe com as diversas opções que o Eclipse nos oferece. Clique em finish e teremos nossa classe Programa.

8) Antes de colocar o tal do System.out.println, escreva o método main. Fique tranquilo, entenderemos melhor o main no decorrer do curso. Nosso código ficará assim:

public class Programa{

    public static void main(String[] args){

        System.out.println("ola mundo");
    }
}

9) Repare que durante a escrita, o Eclipse tenta inferir algumas coisas, além de fechar as aspas automaticamente.

10) Para executarmos nosso código, na parte de cima do Eclipse, clique em Run, e depois em Run As e escolha Java Application.

Projeto Java

Executamos nosso programa no Eclipse através do menu Run -> Run as -> Java Application.

Dentro de um projeto Java, criamos uma nova classe através da opção do menu File -> New -> Class.

A saída do nosso programa executado pelo Eclipse é feita através da view console. A view console mostra a saída do programa.

View Navigator

É parecida com o Windows Explorer do Windows ou o Finder do MAC. Ela nos permite ver o diretório do projeto com seus arquivos na integra.
Mostra mais arquivos, inclusive aqueles omitidos pelo Package Explorer. Podemos selecioná-la através do menu Windows -> Show View -> Navigator

Vimos:
O papel de um IDE e sua diferença de um editor
Como fazer o download do Eclipse IDE
Para que serve um workspace
O conceito de perspectiva
Como criar um projeto Java, inclusive classes e como executá-lo.
Como exibir diferentes views

4 - Tipos e variáveis

Podemos criar e definir o valor de uma variável da seguinte forma:

int diasDoMes;
diasDoMes = 30;

ou, criando a variável e inicializando-a na mesma linha

int idade = 37;

por ser uma linguagem estaticamente tipada é necessário definir o tipo das variáveis. Por isso informamos o int antes de diasDoMes. Além disso,
para definir ou atribuir um valor a variável no java precisamos usar '='. Temos que lembrar também que é uma convenção da comunidade Java
as variáveis normalmente serem iniciadas com letras minúsculas.

Para imprimir o valor da variável, usamos o método println, da classe System, da seguinte forma:

System.out.println(idade);

Repare que quando queremos imprimir o valor que está guardado na variável, não devemos usar as aspas. Assim o valor contido dentro da variável
irá ser apresentada no console.

Podemos usar operadores aritméticos:

+ para Soma

- para Subtração

* para Multiplicação

/ para Divisão

Podemos concatenar valores no System.out.println usando o sinal +, dessa forma faça:

System.out.println("a idade é "+ idade + ", parabéns!");

Assim irá sair o texto que está entre aspas e a variável idade irá imprimir o valor contido nela.

Operações entre números

Vimos que é possível fazer operações entre números, podemos até fazer operações aritméticas com variáveis de tipos diferentes
como multiplicar um inteiro por um número de ponto flutuante (int e double). Por Exemplo:

int dia = 4;
int outroDia = 4 + dia;
System.out.println(outroDia);
Deve imprimir 8

não há dúvida ao somar 2 numeros inteiros.

int brindes = 15;
int pessoas = 2;
System.out.println(brindes / pessoas);
Deve imprimir 7.5

Este código é o errado. Pois quando fazemos operações entre inteiros o resultado sempre será inteiro e não de ponto flutuante.
O resultado na verdade seria 7.

double peso = 4.0;
int quantidade = 10;
System.out.println(peso * quantidade);
Deve imprimir 40.0

Quando fazemos operações entre inteiros e doubles o resultado é um double.

double preco = 5.5;
int ingressos = 4;
System.out.println(preco * ingressos);
Deve imprimir 22.0

quando fazemos operações entre inteiros e doubles o resultado é um double.

Declaramos uma variável salario com o valor de 1250.70, dessa forma:

double salario = 1250.70;

Se salario fosse do tipo int receberíamos um erro, já que temos casas decimais.

não podemos colocar um valor com ponto flutuante dentro de uma variável do tipo int, teste:

int valor = 12.5;             //não compila.
int valor2 = 0.0;             //não compila.
double teste = 125.50;        // compila
int valor3 = teste;           //não compila.

O Java é bastante tipado, então o valor 0.0 no nosso código, não compilará.

Por Exemplo:

int divisao = 5 / 2;
System.out.println(divisao);

Nossa saída será 2.

É importante ressaltar que quando fazemos uma divisão não exata, mas estamos dividindo números inteiros, o Java sempre truncará o resultado. Nesse exemplo a saída será sempre 2.

Se a variável divisao fosse do tipo double, teríamos o mesmo problema, a única diferença seria que nossa saída teria casa decimal: 2.0

coloque em um dos valores da divisão com alguma casa decimal, além de mudar o tipo da variável para double:

double divisao = 5.0 / 2;

Agora sim obteremos a saída esperada: 2.5

Conversões e outros tipos

uma vez que estamos tentando atribuir uma variável double dentro de uma variável int, o que não é possível na linguagem Java.
entretanto, que o inverso é valido, ou seja, podemos atribuir um valor do tipo int dentro de uma variável do tipo double.
Existe uma forma de fazer com que esse código compile. Para isso usaremos o que chamamos de casting

double salario = 1270.50;
int valor = (int) salario;

Quando fazemos o casting, estamos pedindo ao Java que ache uma forma de transformar o valor no lado direito do (int), no nosso caso,
a variável salario, em inteiro. Dessa forma o java transformará double para int.

System.out.println(valor);

A saída será 1270.

Basicamente, para as variáveis primitivas, o casting nada mais é do que fazer com que essa conversão seja feita quando ela não é feita
de maneira automática.

No momento, nossa variável salario é do tipo double, não é a melhor escolha

double valor1 = 0.2;
double valor2 = 0.1;
double total = valor1 + valor2;

System.out.println(total);

A saída será 0.3000000004

Imaginamos que nossa saída seria 0.3, mas obtemos um número completamente diferente.

Devido essa inconsistência, double não seria a melhor escolha para guardarmos salário.
Existem outras alternativas melhores que veremos em outros cursos.

Vamos testar também o tipo float

float pontoFlutuante = 3.14;

Dessa forma, teremos um erro, já que para o Java, 3.14 é um double. Esse é o mesmo problema que tivemos quando tentamos
guardar um double dentro de um int . No tipo double podemos armazenar 64 bits, no float e no int apenas 32 bits.
Isso pode acarretar em perda de informação, para que esse código funcione, podemos fazer o casting, colocando (float) na frente de 3.14,
mas faremos de uma outra forma.

valor 3.14 é um float, para isso coloque f ao final do número

float pontoFlutuante = 3.14f;

Nesta aula iniciamos nosso aprendizado com variáveis e tipos primitivos do Java. Os tipos vistos com mais detalhe foram int (inteiro) e double (decimal). Que usamos para fazer operações aritméticas e também concatenar com texto.

Durante o capítulo falamos sobre boas práticas na hora de nomear classes e também variáveis. Iniciamos as classes com letra maiúscula e as nossas funções e variáveis com letras minúsculas. Vamos falar mais sobre isto no futuro.

Foi possível entender um pouco de type casting e como podemos passar um valor de um tipo para uma variável de outro. Para alguns casos nós não precisamos fazer nada, pois o casting é implícito e em outros precisamos deixar claro para o compilador que sabemos o que estamos fazendo, mostrando entre parênteses o tipo que queremos que seja usado.

5 Trabalhando com caracteres

uma variável do tipo char, é declarada da seguinte forma:

char letra = 'a';

caso fossemos imprimir essa variável em um System.out.println(letra), nossa saída será: a

o tipo char guarda apenas um caractere da tabela unicode, por isso, quando passamos um valor numérico,
teremos como saída o caractere correspondente ao número na tabela unicode. Por exemplo:

char valor = 65;  // Compila!
System.out.println(valor);

A saída do nosso segundo System.out.println será : A

valor = valor + 1;         // Não compila!
System.out.println(valor);

Nosso código não compila, quando escrevemos essa soma, o Java automaticamente transforma o resultado para o maior tipo,
que nesse caso é int, já que o número 1 é um inteiro.

um casting para que esse código compile, para isso devemos escrever:

valor = (char) (valor + 1);         // Compila!
System.out.println(valor);

Repare que envolvemos a soma com parênteses, dessa forma, dizemos para o Java que queremos transformar o resultado dessa soma em char.

uma variável do tipo String, repare que esse tipo é diferente dos que tinhamos usado até o momento, além disso, escrevemos com a inicial maiúscula.

String palavra = "alura cursos online de tecnologia";

Para String, usaremos obrigatóriamente aspas duplas.

Concatene sua String com o número 2020 da seguinte forma:

palavra = palavra + 2020;
System.out.println(palavra);

Repare que o número 2020 aparece no final da frase, isso acontece porque que o Java converte automaticamente o número para String,
diferente do que acontecia com os tipos primitivos que vimos anteriormente.

String frase = "Estou sempre disposto a aprender novas tecnologias";
char letra = 'a';

Lembre-se, uma String é declarada com aspas duplas " e pode ter zero ou mais caracteres.
Um char é declarado com aspas simples ' e pode usar apenas um caractere!

String parcela1 = "10";
String parcela2 = "20";

System.out.println(parcela1 + parcela2);

o resultado será 1020.
O resultado será a concatenação das duas parcelas.

O conceito e como declarar char e String
Como concatenar Strings
Atalho para criação da main
Variáveis guardam valores e não referências.

6 - Praticando Condicionais

6 - Praticando Condicionais

Testes com IF

 criaremos uma classe e nessa classe temos com uma variável inteira idade, inicializada na mesma linha:

 public class TestaCondicional {

    public static void main(String[] args) {
        System.out.println("testando condicionais");
        int idade = 20;
        if (idade >= 18) {
            System.out.println("você tem mais de 18 anos");
            System.out.println("seja bem vindo");
        }
    }
}

Até aqui, nenhuma grande novidade. Neste caso, há duas instruções no bloco do if

Para o else, alteraremos idade para que se receba 16, e digitaremos

public static void main(String[] args) {
        System.out.println("testando condicionais");
        int idade = 16;
        if (idade >= 18) {
            System.out.println("você tem mais de 18 anos");
            System.out.println("seja bem vindo");
        } else {
            System.out.println("infelizmente você não pode entrar");
        }
    }

Com isso, veremos a impressão de infelizmente você não pode entrar no Console. Para o caso da pessoa estar acompanhada, ela poder entrar, então acrescentaremos int quantidadePessoas = 3;, e um if após else. Em seguida, incluiremos outro else para o caso da pessoa ter menos de 18 e estar desacompanhada:

int idade = 16;
        int quantidadePessoas = 3;

        if (idade >= 18) {
            System.out.println("você tem mais de 18 anos");
            System.out.println("seja bem vindo");
        } else {
            if(quantidadePessoas >= 2) {
                System.out.println("você não tem 18, mas " + "pode entrar, pois está acompanhado");
            } else {
            System.out.println("infelizmente você não pode entrar");
            }
        }

Vamos explorar um pouco mais o funcionamento do if, para o qual criaremos mais uma classe. É recomendado criá-las para termos um histórico do que está sendo montado, passo a passo. Em TestaCondicional2, teremos o código mais ou menos parecido com o que estávamos vendo até então:

public class TestaCondicional2 {
    public static void main(String[] args) {
        System.out.println("testando condicionais");
        int idade = 16;
        int quantidadePessoas = 3;

        if (idade >= 18) {
            System.out.println("você tem mais de 18 anos");
            System.out.println("seja bem vindo");
        } else {
            if(quantidadePessoas >= 2) {
                System.out.println("você não tem 18, mas " + "pode entrar, pois está acompanhado");
            } else {
            System.out.println("infelizmente você não pode entrar");
            }
        }
    }
}

Porém, não é muito legal quando o código tem muitos ifs e elses encadeados, algo academicamente denominado complexidade ciclomática ou complexidade condicional. Neste nosso exemplo, poderíamos juntar os casos em que a pessoa tem mais de 18 anos e está acompanhada em uma condicional única.

Para isso, utilizaremos o operador ou, || - no Java, não existe or ou and como palavras chave.

public class TestaCondicional2 {
    public static void main(String[] args) {
        System.out.println("testando condicionais");
        int idade = 16;
        int quantidadePessoas = 3;

        if (idade >= 18 || quantidadePessoas >= 2) {
            System.out.println("seja bem vindo");
        } else {
            System.out.println("infelizmente você não pode entrar");
        }
    }
}

Para este operador, basta apenas uma das condições ser true. Há também o e, ou &&, para quando houver necessidade de se ter mais de 18 anos e estar acompanhado, por exemplo. Isto é, se mantivermos idade como 16 e quantidadePessoas = 1;, obteremos infelizmente você não pode entrar.

Aprendemos sobre tipos de variáveis como o int e o double, para inteiros e pontos flutuantes, respectivamente, o char para quando se usa apenas um caractere, entre outros. Além deles, existe o boolean, palavra chave do Java que é um tipo de variável que só aceita true (verdadeiro) ou false (falso), e fazem parte das palavras reservadas do Java.

public class TestaCondicional2 {
    public static void main(String[] args) {
        System.out.println("testando condicionais");
        int idade = 16;
        boolean acompanhado = true;

        if (idade >= 18 && acompanhado) {
            System.out.println("seja bem vindo");
        } else {
            System.out.println("infelizmente você não pode entrar");
        }
    }
}

No Java, = atribui, enquanto == compara. Em boolean, no caso de acompanhado == true, o próprio acompanhado já é um valor booleano, portanto, == true não é necessário.

O que também aparece com certa frequência é, à direita do boolean, colocarmos uma expressão booleana como idade >= 18 && acompanhado. Sendo assim, poderíamos usar simplesmente boolean acompanhado = quantidadePessoas >= 2;, o que fará com que se conclua se a pessoa está acompanhada ou não. Com a idade sendo 20, se rodarmos o código, obteremos seja bem vindo.

public class TestaCondicional2 {
    public static void main(String[] args) {
        System.out.println("testando condicionais");
        int idade = 20;
                int quantidadePessoas = 3;
        boolean acompanhado = quantidadePessoas >= 2;

                System.out.println("valor de acompanhado = " + acompanhado);

        if (idade >= 18 && acompanhado) {
            System.out.println("seja bem vindo");
        } else {
            System.out.println("infelizmente você não pode entrar");
        }
    }
}

int idade = 68;
boolean ehIdoso = idade >= 65;

Executando esse código corretamente dentro de um método main, qual será o valor da variável ehIdoso?

true

